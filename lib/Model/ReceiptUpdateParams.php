<?php
/**
 * ReceiptUpdateParams
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Freee\Accounting
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Freee\Accounting\Model;

use \ArrayAccess;
use \Freee\Accounting\ObjectSerializer;

/**
 * ReceiptUpdateParams Class Doc Comment
 *
 * @category Class
 * @package  Freee\Accounting
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReceiptUpdateParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'receiptUpdateParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_id' => 'int',
        'description' => 'string',
        'document_type' => 'string',
        'invoice_registration_number' => 'string',
        'issue_date' => 'string',
        'qualified_invoice' => 'string',
        'receipt_metadatum' => '\Freee\Accounting\Model\DealReceiptMetadatum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_id' => null,
        'description' => null,
        'document_type' => null,
        'invoice_registration_number' => null,
        'issue_date' => null,
        'qualified_invoice' => null,
        'receipt_metadatum' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'company_id',
        'description' => 'description',
        'document_type' => 'document_type',
        'invoice_registration_number' => 'invoice_registration_number',
        'issue_date' => 'issue_date',
        'qualified_invoice' => 'qualified_invoice',
        'receipt_metadatum' => 'receipt_metadatum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'description' => 'setDescription',
        'document_type' => 'setDocumentType',
        'invoice_registration_number' => 'setInvoiceRegistrationNumber',
        'issue_date' => 'setIssueDate',
        'qualified_invoice' => 'setQualifiedInvoice',
        'receipt_metadatum' => 'setReceiptMetadatum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'description' => 'getDescription',
        'document_type' => 'getDocumentType',
        'invoice_registration_number' => 'getInvoiceRegistrationNumber',
        'issue_date' => 'getIssueDate',
        'qualified_invoice' => 'getQualifiedInvoice',
        'receipt_metadatum' => 'getReceiptMetadatum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DOCUMENT_TYPE_RECEIPT = 'receipt';
    const DOCUMENT_TYPE_INVOICE = 'invoice';
    const DOCUMENT_TYPE_OTHER = 'other';
    const QUALIFIED_INVOICE_QUALIFIED = 'qualified';
    const QUALIFIED_INVOICE_NOT_QUALIFIED = 'not_qualified';
    const QUALIFIED_INVOICE_UNSELECTED = 'unselected';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_RECEIPT,
            self::DOCUMENT_TYPE_INVOICE,
            self::DOCUMENT_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQualifiedInvoiceAllowableValues()
    {
        return [
            self::QUALIFIED_INVOICE_QUALIFIED,
            self::QUALIFIED_INVOICE_NOT_QUALIFIED,
            self::QUALIFIED_INVOICE_UNSELECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['invoice_registration_number'] = $data['invoice_registration_number'] ?? null;
        $this->container['issue_date'] = $data['issue_date'] ?? null;
        $this->container['qualified_invoice'] = $data['qualified_invoice'] ?? null;
        $this->container['receipt_metadatum'] = $data['receipt_metadatum'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (($this->container['company_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'company_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['company_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'company_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['invoice_registration_number']) && (mb_strlen($this->container['invoice_registration_number']) > 14)) {
            $invalidProperties[] = "invalid value for 'invoice_registration_number', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['invoice_registration_number']) && (mb_strlen($this->container['invoice_registration_number']) < 13)) {
            $invalidProperties[] = "invalid value for 'invoice_registration_number', the character length must be bigger than or equal to 13.";
        }

        if (!is_null($this->container['invoice_registration_number']) && !preg_match("/^T?[1-9][0-9]{12}$/", $this->container['invoice_registration_number'])) {
            $invalidProperties[] = "invalid value for 'invoice_registration_number', must be conform to the pattern /^T?[1-9][0-9]{12}$/.";
        }

        if ($this->container['issue_date'] === null) {
            $invalidProperties[] = "'issue_date' can't be null";
        }
        $allowedValues = $this->getQualifiedInvoiceAllowableValues();
        if (!is_null($this->container['qualified_invoice']) && !in_array($this->container['qualified_invoice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'qualified_invoice', must be one of '%s'",
                $this->container['qualified_invoice'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id 事業所ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {

        if (($company_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling ReceiptUpdateParams., must be smaller than or equal to 2147483647.');
        }
        if (($company_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling ReceiptUpdateParams., must be bigger than or equal to 1.');
        }

        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description メモ (255文字以内)
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ReceiptUpdateParams., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets invoice_registration_number
     *
     * @return string|null
     */
    public function getInvoiceRegistrationNumber()
    {
        return $this->container['invoice_registration_number'];
    }

    /**
     * Sets invoice_registration_number
     *
     * @param string|null $invoice_registration_number この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 インボイス制度適格請求書発行事業者登録番号 - 先頭T数字13桁の固定14桁の文字列 <a target=\"_blank\" href=\"https://www.invoice-kohyo.nta.go.jp/index.html\">国税庁インボイス制度適格請求書発行事業者公表サイト</a>
     *
     * @return self
     */
    public function setInvoiceRegistrationNumber($invoice_registration_number)
    {
        if (!is_null($invoice_registration_number) && (mb_strlen($invoice_registration_number) > 14)) {
            throw new \InvalidArgumentException('invalid length for $invoice_registration_number when calling ReceiptUpdateParams., must be smaller than or equal to 14.');
        }
        if (!is_null($invoice_registration_number) && (mb_strlen($invoice_registration_number) < 13)) {
            throw new \InvalidArgumentException('invalid length for $invoice_registration_number when calling ReceiptUpdateParams., must be bigger than or equal to 13.');
        }
        if (!is_null($invoice_registration_number) && (!preg_match("/^T?[1-9][0-9]{12}$/", $invoice_registration_number))) {
            throw new \InvalidArgumentException("invalid value for $invoice_registration_number when calling ReceiptUpdateParams., must conform to the pattern /^T?[1-9][0-9]{12}$/.");
        }

        $this->container['invoice_registration_number'] = $invoice_registration_number;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return string
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param string $issue_date 取引日 (yyyy-mm-dd)
     *
     * @return self
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets qualified_invoice
     *
     * @return string|null
     */
    public function getQualifiedInvoice()
    {
        return $this->container['qualified_invoice'];
    }

    /**
     * Sets qualified_invoice
     *
     * @param string|null $qualified_invoice この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）
     *
     * @return self
     */
    public function setQualifiedInvoice($qualified_invoice)
    {
        $allowedValues = $this->getQualifiedInvoiceAllowableValues();
        if (!is_null($qualified_invoice) && !in_array($qualified_invoice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'qualified_invoice', must be one of '%s'",
                    $qualified_invoice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['qualified_invoice'] = $qualified_invoice;

        return $this;
    }

    /**
     * Gets receipt_metadatum
     *
     * @return \Freee\Accounting\Model\DealReceiptMetadatum|null
     */
    public function getReceiptMetadatum()
    {
        return $this->container['receipt_metadatum'];
    }

    /**
     * Sets receipt_metadatum
     *
     * @param \Freee\Accounting\Model\DealReceiptMetadatum|null $receipt_metadatum receipt_metadatum
     *
     * @return self
     */
    public function setReceiptMetadatum($receipt_metadatum)
    {
        $this->container['receipt_metadatum'] = $receipt_metadatum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


